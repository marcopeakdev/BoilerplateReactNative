require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '13'
install! 'cocoapods', :deterministic_uuids => false

# dynamic_frameworks = ['libWantToUseUserFramework']
target 'HelloWorld' do
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
  config = use_native_modules!
  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled(["Debug","Release"], {'Flipper' => '0.163.0'}),
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # If u want to enable use_frameworks for one or more library.
  # unconment below and dynamic_frameworks (Line 5)
  # pre_install do |installer|
  #   installer.pod_targets.each do |pod|
  #     if dynamic_frameworks.include?(pod.name)
  #       puts "Overriding the dynamic_framework? method for #{pod.name}"
  #       def pod.dynamic_framework?;
  #         true
  #       end
  #       def pod.build_type;
  #         Pod::BuildType.dynamic_framework
  #       end
  #     end
  #   end
  # end
  
  post_install do |installer|
    react_native_post_install(
      installer,
      # Set `mac_catalyst_enabled` to `true` in order to apply patches
      # necessary for Mac Catalyst builds
      :mac_catalyst_enabled => false
    )
    installer.generated_projects.each do |project|
    project.targets.each do |target|
        target.build_configurations.each do |config|
            config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          end
      end
    end
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
