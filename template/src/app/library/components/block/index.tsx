import React, { forwardRef, useMemo } from 'react';
import { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';

import { propsToStyle } from '@common';
import { useTheme } from '@theme';

import { BlockProps } from './type';

const styles = StyleSheet.create({
  block: {
    flex: 1,
  },
});

export const Block = forwardRef(
  (
    {
      left,
      flex,
      top,
      block,
      right,
      width,
      height,
      border,
      middle,
      bottom,
      zIndex,
      margin,
      shadow,
      opacity,
      padding,
      children,
      maxWidth,
      overflow,
      position,
      flexWrap,
      minWidth,
      alignSelf,
      maxHeight,
      minHeight,
      marginTop,
      marginLeft,
      alignItems,
      colorTheme,
      paddingTop,
      marginRight,
      borderStyle,
      paddingLeft,
      borderColor,
      borderWidth,
      borderRadius,
      paddingRight,
      marginBottom,
      paddingBottom,
      borderTopColor,
      justifyContent,
      borderTopWidth,
      paddingVertical,
      borderLeftWidth,
      borderLeftColor,
      borderRightColor,
      borderRightWidth,
      borderColorTheme,
      paddingHorizontal,
      borderBottomColor,
      borderBottomWidth,
      borderTopLeftRadius,
      borderTopRightRadius,
      color: backgroundColor,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      direction: flexDirection,
      shadowConfig = {},
      style = {},
      ...rest
    }: BlockProps,
    ref: React.ForwardedRef<View>,
  ) => {
    // state
    const theme = useTheme();

    const styleComponent = useMemo<StyleProp<ViewStyle>>(
      () => [
        block === true && styles.block,
        border === true && {
          borderWidth: 1,
          borderColor: '#bbb',
        },
        colorTheme && { backgroundColor: theme.colors[colorTheme] },
        borderColorTheme && { borderColor: theme.colors[borderColorTheme] },
        middle && { alignItems: 'center' },
        shadow && {
          shadowColor: '#000',
          shadowOffset: {
            width: 0,
            height: 2,
          },
          shadowOpacity: 0.25,
          shadowRadius: 3.84,

          elevation: 5,
          ...shadowConfig,
        },
        propsToStyle([
          { margin },
          { marginLeft },
          { marginRight },
          { marginTop },
          { marginBottom },
          { flexDirection },
          { padding },
          { paddingRight },
          { paddingBottom },
          { paddingLeft },
          { paddingTop },
          { paddingHorizontal },
          { paddingVertical },
          { width },
          { height },
          { maxHeight },
          { maxWidth },
          { minHeight },
          { minWidth },
          { borderWidth },
          { borderColor },
          { backgroundColor },
          { justifyContent },
          { alignItems },
          { alignSelf },
          { borderRadius },
          { flex },
          { position },
          { flexWrap },
          { left },
          { right },
          { bottom },
          { top },
          { zIndex },
          { overflow },
          { borderBottomColor },
          { borderBottomLeftRadius },
          { borderBottomRightRadius },
          { borderLeftColor },
          { borderRightColor },
          { borderStyle },
          { borderTopColor },
          { borderTopLeftRadius },
          { borderTopRightRadius },
          { opacity },
          { borderBottomWidth },
          { borderLeftWidth },
          { borderRightWidth },
          { borderTopWidth },
        ]),
        style,
      ],
      [
        block,
        border,
        colorTheme,
        theme.colors,
        borderColorTheme,
        middle,
        shadow,
        shadowConfig,
        margin,
        marginLeft,
        marginRight,
        marginTop,
        marginBottom,
        flexDirection,
        padding,
        paddingRight,
        paddingBottom,
        paddingLeft,
        paddingTop,
        paddingHorizontal,
        paddingVertical,
        width,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        borderWidth,
        borderColor,
        backgroundColor,
        justifyContent,
        alignItems,
        alignSelf,
        borderRadius,
        flex,
        position,
        flexWrap,
        left,
        right,
        bottom,
        top,
        zIndex,
        overflow,
        borderBottomColor,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderLeftColor,
        borderRightColor,
        borderStyle,
        borderTopColor,
        borderTopLeftRadius,
        borderTopRightRadius,
        opacity,
        borderBottomWidth,
        borderLeftWidth,
        borderRightWidth,
        borderTopWidth,
        style,
      ],
    );

    // render
    return (
      <View style={styleComponent} {...rest} ref={ref} children={children} />
    );
  },
);
