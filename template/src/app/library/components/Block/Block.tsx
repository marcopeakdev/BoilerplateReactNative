import React, {memo, useMemo} from 'react';
import {StyleSheet, View, StyleProp, ViewStyle} from 'react-native';
import equals from 'react-fast-compare';
import {enhance} from '@common';
import {AppTheme} from '@config/type';
import {useTheme} from '@react-navigation/native';

import {BlockProps} from './Block.props';

const styles = StyleSheet.create({
  block: {
    flex: 1,
  },
});

const BlockComponent = (props: BlockProps) => {
  // state
  const theme: AppTheme = useTheme();
  const {
    block,
    margin,
    marginLeft,
    alignItems,
    alignSelf,
    marginRight,
    marginTop,
    marginBottom,
    direction,
    padding,
    paddingHorizontal,
    paddingVertical,
    width,
    height,
    border,
    borderWidth,
    borderColor,
    color,
    justifyContent,
    middle,
    paddingRight,
    paddingBottom,
    paddingLeft,
    paddingTop,
    borderRadius,
    shadow,
    flex,
    shadowConfig,
    position,
    flexWrap,
    left,
    right,
    bottom,
    top,
    zIndex,
    overflow,
    borderBottomWidth,
    borderEndWidth,
    borderLeftWidth,
    borderRightWidth,
    borderStartWidth,
    borderTopWidth,
    borderBottomColor,
    borderBottomEndRadius,
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderBottomStartRadius,
    borderEndColor,
    borderLeftColor,
    borderRightColor,
    borderStartColor,
    borderStyle,
    borderTopColor,
    borderTopEndRadius,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderTopStartRadius,
    opacity,
    style = {},
    children,
    colorTheme,
    ...rest
  } = props;

  const styleComponent = useMemo(
    () =>
      enhance([
        [
          block && styles.block,
          {margin},
          {marginLeft},
          {marginRight},
          {marginTop},
          {marginBottom},
          {flexDirection: direction},
          {padding},
          {paddingRight},
          {paddingBottom},
          {paddingLeft},
          {paddingTop},
          {paddingHorizontal},
          {paddingVertical},
          {width},
          {height},
          border === true && {
            borderWidth: StyleSheet.hairlineWidth,
            borderColor: '#bbb',
          },
          typeof borderWidth === 'number' && {
            borderWidth: StyleSheet.hairlineWidth * borderWidth,
          },
          {borderColor},
          {backgroundColor: color},
          colorTheme && {backgroundColor: theme.colors[colorTheme]},
          {justifyContent},
          middle && {alignItems: 'center'},
          {alignItems},
          {alignSelf},
          {borderRadius},
          typeof flex === 'number' && {flex},
          shadow && {
            shadowColor: '#000',
            shadowOffset: {
              width: 0,
              height: 2,
            },
            shadowOpacity: 0.25,
            shadowRadius: 3.84,

            elevation: 5,
            ...shadowConfig,
          },
          {position},
          {flexWrap},
          {left},
          {right},
          {bottom},
          {top},
          {zIndex},
          {overflow},
          typeof borderBottomWidth === 'number' && {
            borderBottomWidth: StyleSheet.hairlineWidth * borderBottomWidth,
          },
          borderEndWidth && {borderEndWidth},
          typeof borderLeftWidth === 'number' && {
            borderLeftWidth: StyleSheet.hairlineWidth * borderLeftWidth,
          },
          typeof borderRightWidth === 'number' && {
            borderRightWidth: StyleSheet.hairlineWidth * borderRightWidth,
          },
          borderStartWidth && {borderStartWidth},
          typeof borderTopWidth === 'number' && {
            borderTopWidth: StyleSheet.hairlineWidth * borderTopWidth,
          },
          borderBottomColor && {borderBottomColor},
          {borderBottomEndRadius},
          {borderBottomLeftRadius},
          {borderBottomRightRadius},
          {borderBottomStartRadius},
          {borderEndColor},
          {borderLeftColor},
          {borderRightColor},
          {borderStartColor},
          {borderStyle},
          {borderTopColor},
          {borderTopEndRadius},
          {borderTopLeftRadius},
          {borderTopRightRadius},
          {borderTopStartRadius},
          {opacity},
          style,
        ] as StyleProp<ViewStyle>,
      ]),
    [
      block,
      margin,
      marginLeft,
      marginRight,
      marginTop,
      marginBottom,
      direction,
      padding,
      paddingRight,
      paddingBottom,
      paddingLeft,
      paddingTop,
      paddingHorizontal,
      paddingVertical,
      width,
      height,
      border,
      borderWidth,
      borderColor,
      color,
      colorTheme,
      theme.colors,
      justifyContent,
      middle,
      alignItems,
      alignSelf,
      borderRadius,
      flex,
      shadow,
      shadowConfig,
      position,
      flexWrap,
      left,
      right,
      bottom,
      top,
      zIndex,
      overflow,
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderEndColor,
      borderLeftColor,
      borderRightColor,
      borderStartColor,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      opacity,
      style,
    ],
  );

  // render
  return (
    <View style={[styleComponent]} {...rest}>
      {children}
    </View>
  );
};
export const Block = memo(BlockComponent, equals);
