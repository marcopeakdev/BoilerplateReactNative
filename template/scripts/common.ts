import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

const padStart = (number: number) => {
  if (number.toString().length < 2) {
    return `0${number}`;
  }

  return String(number);
};

const getEnvJson = (data: string) => {
  const envJson = data.split('\n').reduce((prev, curr) => {
    const firstEqualSign = curr.indexOf('=');

    const key = curr.slice(0, firstEqualSign);

    const value = curr.slice(firstEqualSign + 1);

    if (key.trim().length <= 0 || key.includes('#')) {
      return prev;
    }

    prev[key] = value.replace('"', '').replace('"', '');

    return prev;
  }, {} as Record<string, string>);

  return envJson;
};

export const getEnvJsonFromPath = (envPath: string) => {
  const data = readFileSync(join('./', envPath), 'utf8');

  if (data) {
    const envJson = getEnvJson(data);

    return envJson;
  }

  throw new Error('ENV file not found');
};

export const setupEnv = (envPath: string) => {
  let infoJsEnv = `// This file was generated by current env while u run application.
// Do not edit this file as changes may cause incorrect behavior and will be lost
// once the code is regenerated.

import Config from 'react-native-config';

`;

  const envJson = getEnvJsonFromPath(envPath);

  const todayDate = new Date();

  const year = todayDate.getFullYear();

  const month = todayDate.getMonth() + 1;

  const date = todayDate.getDate();

  const hours = todayDate.getHours();

  const minutes = todayDate.getMinutes();

  const APP_BUILD_VERSION = `${year}.${padStart(month)}.${padStart(
    date,
  )}.${padStart(hours)}.${padStart(minutes)}`;

  infoJsEnv += `export const APP_BUILD_VERSION = '${envJson.VERSION_NAME.replace(
    '"',
    '',
  ).replace('"', '')}.${APP_BUILD_VERSION}';\n\n`;

  infoJsEnv += 'export const {';

  // loop to add variable to env-config.ts
  Object.keys(envJson).forEach(key => {
    infoJsEnv += `\n  ${key},`;
  });

  infoJsEnv += '\n} = Config as Record<string, string>;\n';

  // remove cache
  execSync('rm -rf $TMPDIR/metro-*');

  execSync('rm -rf node_modules/.cache/babel-loader/*');

  // write env-config.ts
  writeFileSync(join('env-config.ts'), infoJsEnv, 'utf8');

  console.log('✨✨✨✨✨ SET UP Env done ✨✨✨✨✨');

  return envJson;
};
