/* eslint-disable @typescript-eslint/no-var-requires */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

module.exports = {
  setupEnv: envPath => {
    return new Promise((resolve, reject) => {
      let infoJsEnv = `
# This file was generated by current env while u start/run application.
# Do not edit this file as changes may cause incorrect behavior and will be lost
# once the code is regenerated.
\n`;
      fs.readFile(path.join('./', envPath), 'utf8', (err, data) => {
        if (err) {
          console.error(err);
          reject(err);
        }
        infoJsEnv += data;
        execSync('rm -rf $TMPDIR/metro-*');
        fs.writeFileSync(path.join('.base.env'), infoJsEnv, 'utf8');
        console.error('✨✨✨✨✨ SET UP Env done ✨✨✨✨✨');
        resolve(infoJsEnv);
      });
    });
  },
  loadEnvFile: () => {
    return new Promise((resolve, reject) => {
      fs.readFile(path.join('./', process.argv[2]), 'utf8', (err, data) => {
        if (err) {
          console.error(err);
          reject(err);
        }
        let envDTS = "declare module '@env' {";
        const envJson = data.split('\n').reduce((prev, curr) => {
          const firstEqualSign = curr.indexOf('=');
          const key = curr.slice(0, firstEqualSign);
          const value = curr.slice(firstEqualSign + 1);
          if (key.trim().length <= 0 || key.includes('#')) {
            return prev;
          }
          prev[key] = value;
          envDTS += `\n  export const ${key}: string;`;
          return prev;
        }, {});
        envDTS += '\n}\n';
        fs.writeFileSync(path.join('declare', 'env.d.ts'), envDTS, 'utf8');
        console.log({ envJson });
        resolve(envJson);
      });
    });
  },
};
